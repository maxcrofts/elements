var o=Object.defineProperty;var l=(r,t)=>o(r,"name",{value:t,configurable:!0});var u=Object.defineProperty,a=l((r,t)=>u(r,"name",{value:t,configurable:!0}),"d");class n extends HTMLElement{constructor(){super(),this.addEventListener("change",this.s.bind(this)),new MutationObserver(this.s.bind(this)).observe(this,{subtree:!0,childList:!0})}static get observedAttributes(){return["input-name","selectors"]}get inputName(){return this.t}set inputName(t){t!=null?this.setAttribute("input-name",t.toString()):this.removeAttribute("input-name")}get selectors(){return this.i}set selectors(t){t!=null?this.setAttribute("selectors",t.toString()):this.removeAttribute("selectors")}attributeChangedCallback(t,i,s){t==="input-name"?this.t=s:t==="selectors"&&(this.i=s),this.s()}s(){var t;if(this.e!==void 0){const s=this.e.length;for(let e=0;e<s;e++)delete this.e[e].dataset.selected;this.e=void 0}let i="";if(this.t!==void 0){const s=this.querySelector(`input[name=${this.t}]:checked`);s!==null&&(i=(t=s.getAttribute("value"))!=null?t:"")}if(this.i!==void 0?this.e=Array.from(this.querySelectorAll(this.i)):i!==""&&(this.e=Array.from(this.querySelectorAll(i)),i=""),this.e!==void 0){const s=this.e.length;if(i!=="")for(let e=0;e<s;e++){const h=this.e[e];h.matches(i)&&(h.dataset.selected="")}else for(let e=0;e<s;e++)this.e[e].dataset.selected=""}}}l(n,"u"),a(n,"QuerySelector"),window.customElements.define("query-selector",n);
//# sourceMappingURL=index.js.map

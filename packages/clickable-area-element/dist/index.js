var c=Object.defineProperty;var i=(s,e)=>c(s,"name",{value:e,configurable:!0});var o=Object.defineProperty,d=i((s,e)=>o(s,"name",{value:e,configurable:!0}),"l");class l extends HTMLElement{constructor(){super(),this.e=null,this.addEventListener("click",e=>{var t;const r=this.control,n=(t=e.target)==null?void 0:t.tagName;if(n!=="BUTTON"&&n!=="INPUT"&&n!=="SELECT"&&n!=="TEXTAREA"&&r?.focus(),e.target!==r){const a=new PointerEvent(e.type,e);r?.dispatchEvent(a)}},!1),new MutationObserver(this.s.bind(this)).observe(this,{subtree:!0,childList:!0})}static get observedAttributes(){return["for"]}get control(){var e;return this.t!=null?(e=document.getElementById(this.t))!=null?e:this.e:this.e}get htmlFor(){return this.t}set htmlFor(e){e!=null?this.setAttribute("for",e.toString()):this.removeAttribute("for")}connectedCallback(){this.s()}disconnnectedCallback(){this.e=null}attributeChangedCallback(e,t,r){e==="for"&&(this.t=r)}s(){const e=document.createTreeWalker(this,NodeFilter.SHOW_ELEMENT,{acceptNode:t=>{switch(t?.tagName){case"INPUT":return t.hidden?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT;case"BUTTON":case"METER":case"OUTPUT":case"PROGRESS":case"SELECT":case"TEXTAREA":return NodeFilter.FILTER_ACCEPT;default:return NodeFilter.FILTER_SKIP}}});this.e=e.nextNode()}}i(l,"c"),d(l,"ClickableAreaElement"),window.customElements.get("clickable-area")===void 0&&(window.customElements.define("clickable-area",l),window.ClickableAreaElement=l);export{l as default};
//# sourceMappingURL=index.js.map
